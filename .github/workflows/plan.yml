name: plan

on:
  pull_request:
    branches: [ "staging", "production" ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-plan-staging:
    environment: staging
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'staging' }}
    steps:

      - name: checkout Code Repository
        uses: actions/checkout@v3

      - name: install SSH key
        # uses: shimataro/ssh-key-action@v2
        # with:
        #   key: ${{ secrets.SSH_KEY }}
        #   known_hosts: ${{ secrets.KNOWN_HOSTS }}
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
          ssh-host: ${{ secrets.DROPLET_IPV4 }}

      - name: create secret files
        env:
          TFVARS: ${{ secrets.TFVARS }}
        run: |
          echo $TFVARS
          echo $TFVARS | base64 -di > terraform/env.tfvars
          
      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: initialize terraform
        # id: tf-init
        # continue-on-error: true
        env:
          TF_WORKSPACE: another-doge-test
        run: |
          cd terraform
          terraform init -input=false

      - name: plan terraform
        id: plan
        continue-on-error: true
        env:
          TF_WORKSPACE: doge-test
          TF_VAR_do_token: ${{ secrets.DO_TOKEN}}
          TF_VAR_gh_token: ${{ secrets.GH_TOKEN}}
          TF_VAR_tf_api_token: ${{ secrets.TF_API_TOKEN}}
        run: |
          cd terraform
          terraform plan -var-file=env.tfvars -input=false -no-color

      - name: post plan to github PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ```diff
            ${{ steps.plan.outputs.stdout }}
            ```

      - name: fail if plan fails
        if: steps.plan.outcome == 'failure'
        run: exit 1
